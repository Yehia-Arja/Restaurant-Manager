name: CI/CD

on:
  push:
    branches:
      - main
      - production

env:
  PROJECT_DIR: smartDine-server

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, xml, redis, pdo_mysql
          tools: composer

      - name: Install Laravel dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: composer install --no-interaction --optimize-autoloader

      - name: Generate local .env
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Build Docker Compose images
        working-directory: ${{ env.PROJECT_DIR }}
        run: docker-compose build --parallel

  test:
    name: Run Laravel Tests
    runs-on: ubuntu-latest
    needs: build

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, xml, redis, pdo_mysql
          tools: composer

      - name: Install Laravel dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: composer install --no-interaction --optimize-autoloader

      - name: Prepare testing environment
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          cp .env.example .env.testing
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=test_db/' .env.testing
          sed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env.testing
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=root/' .env.testing
          php artisan key:generate --env=testing

      - name: Migrate & run tests
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          php artisan migrate:fresh --env=testing --force
          php artisan test

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH Action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          script: |
            cd ~/app/${{ env.PROJECT_DIR }}
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
            # run migrations & clear cache
            docker-compose exec -T laravel php artisan migrate --force
            docker-compose exec -T laravel php artisan optimize:clear

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH Action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: 22
          script: |
            cd ~/app/${{ env.PROJECT_DIR }}
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
            # run migrations & clear cache
            docker-compose exec -T laravel php artisan migrate --force
            docker-compose exec -T laravel php artisan optimize:clear
