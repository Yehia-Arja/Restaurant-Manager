name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - production

env:
  DOCKER_COMPOSE_VERSION: "3.8"
  STAGING_SERVER: user@staging-server-ip
  PRODUCTION_SERVER: user@production-server-ip

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-qemu-action@v2

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Verify Docker Compose Installation
        run: docker-compose --version

      - name: Build containers
        run: docker-compose -f RestaurantManager/smartDine-server/docker-compose.yml build

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, xml, ctype, json, tokenizer, bcmath, redis, pdo_mysql

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Configure environment
        run: |
          cp .env.example .env.test
          echo "APP_ENV=testing" >> .env.test
          echo "DB_HOST=127.0.0.1" >> .env.test
          echo "DB_DATABASE=test_db" >> .env.test
          echo "DB_USERNAME=root" >> .env.test
          echo "DB_PASSWORD=root" >> .env.test

      - name: Debug Environment File
        run: cat .env.test

      - name: Run tests
        run: |
          php artisan key:generate --env=testing
          php artisan migrate:fresh --env=testing
          php artisan test

  deploy:
    name: Deploy
    needs: [build, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        if: github.ref == 'refs/heads/main' && matrix.environment == 'staging'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_KEY }}
          KNOWN_HOSTS: ${{ secrets.STAGING_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/id_rsa
          scp -r RestaurantManager/smartDine-server/docker-compose.yml .env.${{ matrix.environment }} ${{ env.STAGING_SERVER }}:/app
          ssh ${{ env.STAGING_SERVER }} "
            cd /app
            docker-compose down
            docker-compose up -d --build
            docker-compose exec laravel php artisan migrate --force
            docker-compose exec laravel php artisan optimize:clear
          "

      - name: Deploy to Production
        if: github.ref == 'refs/heads/production' && matrix.environment == 'production'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
          KNOWN_HOSTS: ${{ secrets.PRODUCTION_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/id_rsa
          scp -r RestaurantManager/smartDine-server/docker-compose.yml .env.${{ matrix.environment }} ${{ env.PRODUCTION_SERVER }}:/app
          ssh ${{ env.PRODUCTION_SERVER }} "
            cd /app
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
            docker-compose exec laravel php artisan migrate --force
            docker-compose exec laravel php artisan optimize:clear
          "
