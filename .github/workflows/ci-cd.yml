name: CI/CD Pipeline

on:
  push:
    branches: [main, production]

env:
  DOCKER_COMPOSE_VERSION: "3.8"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build containers
        working-directory: smartDine-server
        run: docker-compose -f docker-compose.yml build

  test:
    needs: build
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]

    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring,xml,ctype,json,tokenizer,bcmath,redis,pdo_mysql

      - name: Install Composer deps
        working-directory: smartDine-server
        run: composer install --no-interaction --prefer-dist

      - name: Configure .env (testing)
        working-directory: smartDine-server
        run: |
          cp .env.example .env
          {
            echo "APP_ENV=testing"
            echo "DB_HOST=127.0.0.1"
            echo "DB_DATABASE=test_db"
            echo "DB_USERNAME=root"
            echo "DB_PASSWORD=root"
          } >> .env

      - name: Run PHPUnit
        working-directory: smartDine-server
        run: |
          php artisan key:generate --env=testing
          php artisan migrate:fresh --env=testing
          php artisan test

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 1) Decide target
      - id: pick
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "server=${{ secrets.STAGING_SERVER }}"            >> $GITHUB_OUTPUT
            echo "envfile=.env.staging"                            >> $GITHUB_OUTPUT
            echo "pkey=${{ secrets.SSH_STAGING_PRIVATE_KEY }}"     >> $GITHUB_OUTPUT
            echo "kh=${{ secrets.SSH_STAGING_KNOWN_HOSTS }}"       >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == "refs/heads/production" ]]; then
            echo "server=${{ secrets.PRODUCTION_SERVER }}"         >> $GITHUB_OUTPUT
            echo "envfile=.env.production"                         >> $GITHUB_OUTPUT
            echo "pkey=${{ secrets.SSH_PRODUCTION_PRIVATE_KEY }}"  >> $GITHUB_OUTPUT
            echo "kh=${{ secrets.SSH_PRODUCTION_KNOWN_HOSTS }}"    >> $GITHUB_OUTPUT
          fi

      # 2) Write SSH material & deploy
      - name: Deploy via SSH
        env:
          SERVER: ${{ steps.pick.outputs.server }}
          ENV_FILE: ${{ steps.pick.outputs.envfile }}
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ steps.pick.outputs.kh }}"  > ~/.ssh/known_hosts
          printf '%s\n' "${{ steps.pick.outputs.pkey }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # copy compose + env
          scp -q -o StrictHostKeyChecking=yes \
              -r smartDine-server/docker-compose.yml \
                 smartDine-server/$ENV_FILE \
                 "$SERVER:/app"

          # remote commands
          ssh -o StrictHostKeyChecking=yes "$SERVER" <<'REMOTE'
            set -e
            cd /app
            docker-compose down || true
            docker-compose pull
            docker-compose up -d --build
            docker-compose exec laravel php artisan migrate --force
            docker-compose exec laravel php artisan optimize:clear
          REMOTE
